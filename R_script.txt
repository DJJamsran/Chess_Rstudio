#Overview
#Installation
install.packages("chess")

#Or install the development version from GitHub with:
# install.packages("remotes")
remotes::install_github("curso-r/chess")

#This should automatically install python-chess to your {reticulate} environment, but you can also explicitly do it with a convenient function:
chess::install_chess()

#Example
#If you want to check out an already-existing game, just go ahead and employ the read_game() function. Dive into the game using forward()/back() commands. 
#You can also explore various options with variations()/variation() to view all listed variations for the upcoming move and pick the one that catches your eye

library(chess)

# Read final game from the Queen's Gambit
file <- system.file("harmon.pgn", package = "chess")
harmon_borgov <- read_game(file)

# Starting position
harmon_borgov
#>         <Start>
#> r n b q k b n r
#> p p p p p p p p
#> . . . . . . . .
#> . . . . . . . .
#> . . . . . . . .
#> . . . . . . . .
#> P P P P P P P P
#> R N B Q K B N R

# Navigate to 2. c4
harmon_borgov %>%
  forward(3)
#>         <2. c4>
#> r n b q k b n r
#> p p p . p p p p
#> . . . . . . . .
#> . . . p . . . .
#> . . P P . . . .
#> . . . . . . . .
#> P P . . P P P P
#> R N B Q K B N R

# See all variations for 2...
harmon_borgov %>%
  forward(3) %>%
  variations()
#>       <2... e5>          <2... e6>
#> r n b q k b n r    r n b q k b n r
#> p p p . . p p p    p p p . . p p p
#> . . . . . . . .    . . . . p . . .
#> . . . p p . . .    . . . p . . . .
#> . . P P . . . .    . . P P . . . .
#> . . . . . . . .    . . . . . . . .
#> P P . . P P P P    P P . . P P P P
#> R N B Q K B N R    R N B Q K B N R

# Follow the sideline
harmon_borgov %>%
  forward(3) %>%
  variation(2)
#>       <2... e6>
#> r n b q k b n r
#> p p p . . p p p
#> . . . . p . . .
#> . . . p . . . .
#> . . P P . . . .
#> . . . . . . . .
#> P P . . P P P P
#> R N B Q K B N R

#Once you've got {chess} installed, you're in for a treat – there are loads of other games bundled with the package, 
#ready to roll right after installation! Check out the vignette("games") for the lowdown on all the exciting options and get ready to dive into some gaming goodness

#Want to craft your own chess masterpiece? Easy peasy! Just fire up the game() function, and you're in control.
#Feel like spicing things up? The move() function is your go-to move – it not only adds moves but also lets you branch out and create a whole tree of possibilities for your game
#Strings are converted to simple moves, while list()s behave exactly as parenthesis in PGN, creating a variation of the last move. Here you can see how to recreate a Scholar’s mate and some ways to avoid it:

# Scholar's mate and some defenses
scholars_mate <- game() %>%
  move("e4") %>%
  move("e5", list("e6"), list("d5")) %>%
  move("Bc4") %>%
  move("Nc6", list("Nf6")) %>%
  move("Qh5") %>%
  move("Nf6", list("g6", "Qf3", "Nf6")) %>%
  move("Qxf7")

# Last mainline move
scholars_mate
#>      <4. Qxf7#>
#> r . b q k b . r
#> p p p p . Q p p
#> . . n . . n . .
#> . . . . p . . .
#> . . B . P . . .
#> . . . . . . . .
#> P P P P . P P P
#> R N B . K . N R


# Print with unicode (doesn't look good on GitHub)
print(scholars_mate, unicode = TRUE)
#>      <4. Qxf7#>
#> ♜ . ♝ ♛ ♚ ♝ . ♜
#> ♟ ♟ ♟ ♟ . ♕ ♟ ♟
#> . . ♞ . . ♞ . .
#> . . . . ♟ . . .
#> . . ♗ . ♙ . . .
#> . . . . . . . .
#> ♙ ♙ ♙ ♙ . ♙ ♙ ♙
#> ♖ ♘ ♗ . ♔ . ♘ ♖

# Export the FEN of the board
fen(scholars_mate)
#> [1] "r1bqkb1r/pppp1Qpp/2n2n2/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 4"

# See the PGN after some move
str(back(scholars_mate, 3))
#> 2... Nc6 3. Qh5 Nf6 ( 3... g6 4. Qf3 Nf6 ) 4. Qxf7#

# Export the PGN after some move
pgn(back(scholars_mate, 3))
#> [1] "2... Nc6 3. Qh5 Nf6 ( 3... g6 4. Qf3 Nf6 ) 4. Qxf7#"

# Plot current board
plot(scholars_mate)
